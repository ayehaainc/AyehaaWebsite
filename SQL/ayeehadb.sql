/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/9/2017
Description:	Creates the role table and respective stored procedures

*/


USE ayehaadb;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `ayehaadb`.`role`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_role_Load`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_role_LoadAll`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_role_Add`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_role_Update`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_role_Delete`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_role_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `ayehaadb`.`role` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_role_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_role_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`role`.`Id` AS `Id`,
		`role`.`Name` AS `Name`,
		`role`.`Description` AS `Description`
	FROM `role`
	WHERE 		`role`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_role_LoadAll`
()
BEGIN
	SELECT
		`role`.`Id` AS `Id`,
		`role`.`Name` AS `Name`,
		`role`.`Description` AS `Description`
	FROM `role`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_role_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `role` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_role_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `role`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`role`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_role_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `role`
	WHERE		`role`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_role_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`role`.`Id` AS `Id`,
		`role`.`Name` AS `Name`,
		`role`.`Description` AS `Description`
	FROM `role`
	WHERE
		COALESCE(role.`Id`,0) = COALESCE(paramId,role.`Id`,0)
		AND COALESCE(role.`Name`,'') = COALESCE(paramName,role.`Name`,'')
		AND COALESCE(role.`Description`,'') = COALESCE(paramDescription,role.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/9/2017
Description:	Creates the securityuser table and respective stored procedures

*/


USE ayehaadb;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `ayehaadb`.`securityuser`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_securityuser_Load`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_securityuser_LoadAll`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_securityuser_Add`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_securityuser_Update`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_securityuser_Delete`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_securityuser_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `ayehaadb`.`securityuser` (
Id INT AUTO_INCREMENT,
Username VARCHAR(255),
Password VARCHAR(255),
Email VARCHAR(255),
RoleId INT,
CreateDate DATETIME,
CONSTRAINT pk_securityuser_Id PRIMARY KEY (Id),
CONSTRAINT fk_securityuser_RoleId_Role_Id FOREIGN KEY (RoleId) REFERENCES role (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_securityuser_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`securityuser`.`Id` AS `Id`,
		`securityuser`.`Username` AS `Username`,
		`securityuser`.`Password` AS `Password`,
		`securityuser`.`Email` AS `Email`,
		`securityuser`.`RoleId` AS `RoleId`,
		`securityuser`.`CreateDate` AS `CreateDate`
	FROM `securityuser`
	WHERE 		`securityuser`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_securityuser_LoadAll`
()
BEGIN
	SELECT
		`securityuser`.`Id` AS `Id`,
		`securityuser`.`Username` AS `Username`,
		`securityuser`.`Password` AS `Password`,
		`securityuser`.`Email` AS `Email`,
		`securityuser`.`RoleId` AS `RoleId`,
		`securityuser`.`CreateDate` AS `CreateDate`
	FROM `securityuser`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_securityuser_Add`
(
	 IN paramUsername VARCHAR(255),
	 IN paramPassword VARCHAR(255),
	 IN paramEmail VARCHAR(255),
	 IN paramRoleId INT,
	 IN paramCreateDate DATETIME
)
BEGIN
	INSERT INTO `securityuser` (Username,Password,Email,RoleId,CreateDate)
	VALUES (paramUsername, paramPassword, paramEmail, paramRoleId, paramCreateDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_securityuser_Update`
(
	IN paramId INT,
	IN paramUsername VARCHAR(255),
	IN paramPassword VARCHAR(255),
	IN paramEmail VARCHAR(255),
	IN paramRoleId INT,
	IN paramCreateDate DATETIME
)
BEGIN
	UPDATE `securityuser`
	SET Username = paramUsername
		,Password = paramPassword
		,Email = paramEmail
		,RoleId = paramRoleId
		,CreateDate = paramCreateDate
	WHERE		`securityuser`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_securityuser_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `securityuser`
	WHERE		`securityuser`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_securityuser_Search`
(
	IN paramId INT,
	IN paramUsername VARCHAR(255),
	IN paramPassword VARCHAR(255),
	IN paramEmail VARCHAR(255),
	IN paramRoleId INT,
	IN paramCreateDate DATETIME
)
BEGIN
	SELECT
		`securityuser`.`Id` AS `Id`,
		`securityuser`.`Username` AS `Username`,
		`securityuser`.`Password` AS `Password`,
		`securityuser`.`Email` AS `Email`,
		`securityuser`.`RoleId` AS `RoleId`,
		`securityuser`.`CreateDate` AS `CreateDate`
	FROM `securityuser`
	WHERE
		COALESCE(securityuser.`Id`,0) = COALESCE(paramId,securityuser.`Id`,0)
		AND COALESCE(securityuser.`Username`,'') = COALESCE(paramUsername,securityuser.`Username`,'')
		AND COALESCE(securityuser.`Password`,'') = COALESCE(paramPassword,securityuser.`Password`,'')
		AND COALESCE(securityuser.`Email`,'') = COALESCE(paramEmail,securityuser.`Email`,'')
		AND COALESCE(securityuser.`RoleId`,0) = COALESCE(paramRoleId,securityuser.`RoleId`,0)
		AND COALESCE(CAST(securityuser.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(securityuser.`CreateDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/9/2017
Description:	Creates the customer table and respective stored procedures

*/


USE ayehaadb;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `ayehaadb`.`customer`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_customer_Load`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_customer_LoadAll`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_customer_Add`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_customer_Update`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_customer_Delete`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_customer_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `ayehaadb`.`customer` (
Id INT AUTO_INCREMENT,
FirstName VARCHAR(255),
LastName VARCHAR(255),
Email VARCHAR(255),
Password VARCHAR(255),
CreateDate DATETIME,
CONSTRAINT pk_customer_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_customer_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`customer`.`Id` AS `Id`,
		`customer`.`FirstName` AS `FirstName`,
		`customer`.`LastName` AS `LastName`,
		`customer`.`Email` AS `Email`,
		`customer`.`Password` AS `Password`,
		`customer`.`CreateDate` AS `CreateDate`
	FROM `customer`
	WHERE 		`customer`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_customer_LoadAll`
()
BEGIN
	SELECT
		`customer`.`Id` AS `Id`,
		`customer`.`FirstName` AS `FirstName`,
		`customer`.`LastName` AS `LastName`,
		`customer`.`Email` AS `Email`,
		`customer`.`Password` AS `Password`,
		`customer`.`CreateDate` AS `CreateDate`
	FROM `customer`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_customer_Add`
(
	 IN paramFirstName VARCHAR(255),
	 IN paramLastName VARCHAR(255),
	 IN paramEmail VARCHAR(255),
	 IN paramPassword VARCHAR(255),
	 IN paramCreateDate DATETIME
)
BEGIN
	INSERT INTO `customer` (FirstName,LastName,Email,Password,CreateDate)
	VALUES (paramFirstName, paramLastName, paramEmail, paramPassword, paramCreateDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_customer_Update`
(
	IN paramId INT,
	IN paramFirstName VARCHAR(255),
	IN paramLastName VARCHAR(255),
	IN paramEmail VARCHAR(255),
	IN paramPassword VARCHAR(255),
	IN paramCreateDate DATETIME
)
BEGIN
	UPDATE `customer`
	SET FirstName = paramFirstName
		,LastName = paramLastName
		,Email = paramEmail
		,Password = paramPassword
		,CreateDate = paramCreateDate
	WHERE		`customer`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_customer_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `customer`
	WHERE		`customer`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_customer_Search`
(
	IN paramId INT,
	IN paramFirstName VARCHAR(255),
	IN paramLastName VARCHAR(255),
	IN paramEmail VARCHAR(255),
	IN paramPassword VARCHAR(255),
	IN paramCreateDate DATETIME
)
BEGIN
	SELECT
		`customer`.`Id` AS `Id`,
		`customer`.`FirstName` AS `FirstName`,
		`customer`.`LastName` AS `LastName`,
		`customer`.`Email` AS `Email`,
		`customer`.`Password` AS `Password`,
		`customer`.`CreateDate` AS `CreateDate`
	FROM `customer`
	WHERE
		COALESCE(customer.`Id`,0) = COALESCE(paramId,customer.`Id`,0)
		AND COALESCE(customer.`FirstName`,'') = COALESCE(paramFirstName,customer.`FirstName`,'')
		AND COALESCE(customer.`LastName`,'') = COALESCE(paramLastName,customer.`LastName`,'')
		AND COALESCE(customer.`Email`,'') = COALESCE(paramEmail,customer.`Email`,'')
		AND COALESCE(customer.`Password`,'') = COALESCE(paramPassword,customer.`Password`,'')
		AND COALESCE(CAST(customer.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(customer.`CreateDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			1/14/2018
Description:	Creates the subscriber table and respective stored procedures

*/


USE ayehaadb;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `ayehaadb`.`subscriber`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_subscriber_Load`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_subscriber_LoadAll`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_subscriber_Add`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_subscriber_Update`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_subscriber_Delete`;
DROP PROCEDURE IF EXISTS `ayehaadb`.`usp_subscriber_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `ayehaadb`.`subscriber` (
Id INT AUTO_INCREMENT,
Email VARCHAR(255),
CreateDate DATETIME,
CONSTRAINT pk_subscriber_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_subscriber_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`subscriber`.`Id` AS `Id`,
		`subscriber`.`Email` AS `Email`,
		`subscriber`.`CreateDate` AS `CreateDate`
	FROM `subscriber`
	WHERE 		`subscriber`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_subscriber_LoadAll`
()
BEGIN
	SELECT
		`subscriber`.`Id` AS `Id`,
		`subscriber`.`Email` AS `Email`,
		`subscriber`.`CreateDate` AS `CreateDate`
	FROM `subscriber`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_subscriber_Add`
(
	 IN paramEmail VARCHAR(255),
	 IN paramCreateDate DATETIME
)
BEGIN
	INSERT INTO `subscriber` (Email,CreateDate)
	VALUES (paramEmail, paramCreateDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_subscriber_Update`
(
	IN paramId INT,
	IN paramEmail VARCHAR(255),
	IN paramCreateDate DATETIME
)
BEGIN
	UPDATE `subscriber`
	SET Email = paramEmail
		,CreateDate = paramCreateDate
	WHERE		`subscriber`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_subscriber_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `subscriber`
	WHERE		`subscriber`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_subscriber_Search`
(
	IN paramId INT,
	IN paramEmail VARCHAR(255),
	IN paramCreateDate DATETIME
)
BEGIN
	SELECT
		`subscriber`.`Id` AS `Id`,
		`subscriber`.`Email` AS `Email`,
		`subscriber`.`CreateDate` AS `CreateDate`
	FROM `subscriber`
	WHERE
		COALESCE(subscriber.`Id`,0) = COALESCE(paramId,subscriber.`Id`,0)
		AND COALESCE(subscriber.`Email`,'') = COALESCE(paramEmail,subscriber.`Email`,'')
		AND COALESCE(CAST(subscriber.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(subscriber.`CreateDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;


use ayehaadb;
DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_customer_Lookup`
(
	IN paramEmail VARCHAR(255)
)
BEGIN
  SELECT
	  `customer`.`Id` AS `Id`,
		`customer`.`FirstName` AS `FirstName`,
		`customer`.`LastName` AS `LastName`,
		`customer`.`Email` AS `Email`,
		`customer`.`Password` AS `Password`,
		`customer`.`CreateDate` AS `CreateDate`
	FROM `customer`
	WHERE 		`customer`.`Email` = paramEmail;
END //
DELIMITER ;

use ayehaadb;
DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_securityuser_Lookup`
(
	IN paramUsername VARCHAR(255)
)
BEGIN
  SELECT
			`securityuser`.`Id` AS `Id`,
		`securityuser`.`Username` AS `Username`,
		`securityuser`.`Password` AS `Password`,
		`securityuser`.`Email` AS `Email`,
		`securityuser`.`RoleId` AS `RoleId`,
		`securityuser`.`CreateDate` AS `CreateDate`
	FROM `securityuser`
	WHERE 		`securityuser`.`Username` = paramUsername;
END //
DELIMITER ;

use ayehaadb;
DELIMITER //
CREATE PROCEDURE `ayehaadb`.`usp_subscriber_Lookup`
(
	 IN paramEmail VARCHAR(255)
)
BEGIN
	SELECT
		`subscriber`.`Id` AS `Id`,
		`subscriber`.`Email` AS `Email`,
		`subscriber`.`CreateDate` AS `CreateDate`
	FROM `subscriber`
	WHERE 		`subscriber`.`Email` = paramEmail;
END //
DELIMITER ;

use ayehaadb;
INSERT INTO `role` (`Id`, `Name`, `Description`) VALUES ('1', 'Administrator', 'Administrator Role.');