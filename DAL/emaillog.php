<?php
/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			1/15/2018
Description:	Creates the DAL class for  emaillog table and respective stored procedures

*/



class Emaillog {

	// This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
	protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

	/******************************************************************/
	// Properties
	/******************************************************************/

	protected $Id;
	protected $Email;
	protected $SentDate;
	protected $EmailTypeId;


	/******************************************************************/
	// Constructors
	/******************************************************************/
	public function __construct() {
		$argv = func_get_args();
		switch( func_num_args() ) {
			case 0:
				self::__constructBase();
				break;
			case 1:
				self::__constructPK( $argv[0] );
				break;
			case 4:
				self::__constructFull( $argv[0], $argv[1], $argv[2], $argv[3] );
		}
	}


	public function __constructBase() {
		$this->Id = 0;
		$this->Email = "";
		$this->SentDate = "";
		$this->EmailTypeId = 0;
	}


	public function __constructPK($paramId) {
		$this->load($paramId);
	}


	public function __constructFull($paramId,$paramEmail,$paramSentDate,$paramEmailTypeId) {
		$this->Id = $paramId;
		$this->Email = $paramEmail;
		$this->SentDate = $paramSentDate;
		$this->EmailTypeId = $paramEmailTypeId;
	}


	/******************************************************************/
	// Accessors / Mutators
	/******************************************************************/

	public function getId(){
		return $this->Id;
	}
	public function setId($value){
		$this->Id = $value;
	}
	public function getEmail(){
		return $this->Email;
	}
	public function setEmail($value){
		$this->Email = $value;
	}
	public function getSentDate(){
		return $this->SentDate;
	}
	public function setSentDate($value){
		$this->SentDate = $value;
	}
	public function getEmailTypeId(){
		return $this->EmailTypeId;
	}
	public function setEmailTypeId($value){
		$this->EmailTypeId = $value;
	}


	/******************************************************************/
	// Public Methods
	/******************************************************************/


	public function load($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_emaillog_Load(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);

		while ($row = $result->fetch_assoc()) {
		 $this->setId($row['Id']);
		 $this->setEmail($row['Email']);
		 $this->setSentDate($row['SentDate']);
		 $this->setEmailTypeId($row['EmailTypeId']);
		}
	}


	public function save() {
		if ($this->getId() == 0)
			$this->insert();
		else
			$this->update();
	}

	/******************************************************************/
	// Private Methods
	/******************************************************************/



	private function insert() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_emaillog_Add(?,?,?)');
		$arg1 = $this->getEmail();
		$arg2 = $this->getSentDate();
		$arg3 = $this->getEmailTypeId();
		$stmt->bind_param('ssi',$arg1,$arg2,$arg3);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		while ($row = $result->fetch_assoc()) {
			// By default, the DALGen generated INSERT procedure returns the scope identity as id
			$this->load($row['id']);
		}
	}


	private function update() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_emaillog_Update(?,?,?,?)');
		$arg1 = $this->getId();
		$arg2 = $this->getEmail();
		$arg3 = $this->getSentDate();
		$arg4 = $this->getEmailTypeId();
		$stmt->bind_param('issi',$arg1,$arg2,$arg3,$arg4);
		$stmt->execute();
	}

	private static function setNullValue($value){
		if ($value == "")
			return null;
		else
			return $value;
	}

	/******************************************************************/
	// Static Methods
	/******************************************************************/



	public static function loadall() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_emaillog_LoadAll()');
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$emaillog = new Emaillog($row['Id'],$row['Email'],$row['SentDate'],$row['EmailTypeId']);
				$arr[] = $emaillog;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}


	public static function remove($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_emaillog_Delete(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();
	}


	public static function search($paramId,$paramEmail,$paramSentDate,$paramEmailTypeId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_emaillog_Search(?,?,?,?)');
		$arg1 = Emaillog::setNullValue($paramId);
		$arg2 = Emaillog::setNullValue($paramEmail);
		$arg3 = Emaillog::setNullValue($paramSentDate);
		$arg4 = Emaillog::setNullValue($paramEmailTypeId);
		$stmt->bind_param('issi',$arg1,$arg2,$arg3,$arg4);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$emaillog = new Emaillog($row['Id'],$row['Email'],$row['SentDate'],$row['EmailTypeId']);
				$arr[] = $emaillog;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}
}
